<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/css/style.css" />
  <link rel="stylesheet" href="/css/user/user-extract.css" />
  <title>MedExtract</title>
</head>

<body>

  <nav class="user-navbar">
    <div class="container">
      <!-- Logo -->
      <div class="logo">
        <a href="/user-extract">
          <img src="/images/logo-nav.png" alt="MedExtract Logo" class="logo-img" />
        </a>
      </div>

      <!-- Desktop Navigation -->
      <ul class="nav" id="user-nav">
        <li><a href="/user-extract">Extract</a></li>
        <li><a href="/user-search">Search</a></li>
      </ul>

      <!-- User Dropdown -->
      <div class="user-menu" onclick="toggleDropdown(event)">
        <img src="/images/icons/user-circle.svg" alt="User Menu" class="user-icon" />
        <span class="username">
          <%= username %>
        </span>
        <div class="dropdown">
          <a href="/user-settings">
            <img src="/images/icons/gear-six.svg" alt="Settings" /> Settings
          </a>
          <a class="logout-confirm" href="#">
            <img src="/images/icons/sign-out.svg" alt="Sign Out" /> Sign Out
          </a>
        </div>
      </div>

      <!-- Burger Toggle -->
      <div class="burger" id="burger-toggle" onclick="toggleBurger()">
        <img src="/images/icons/list-white.svg" alt="Menu" class="burger-icon" />
      </div>
    </div>

    <!-- Mobile Menu -->
    <div class="mobile-menu" id="mobile-menu">
      <div class="mobile-user">
        <img src="/images/icons/user-circle.svg" alt="User Menu" class="user-icon" />
        <span class="username">
          <%= username %>
        </span>
      </div>

      <ul>
        <li><a href="/user-extract">Extract</a></li>
        <li><a href="/user-search">Search</a></li>
        <li><a href="/user-settings">Settings</a></li>
        <li><a class="logout-confirm" href="#">Sign Out</a></li>
      </ul>
    </div>
  </nav>


  <!-- Logout Modal -->
  <div class="logout-modal-container">
    <div class="logout-modal">
      <div class="modal-header">
        <div class="modal-title">
          <img src="images/icons/seal-question.svg" alt="question mark">
          <h3>Confirm Logout</h3>
        </div>
        <img id="logout-close-btn" class="close-btn" src="images/icons/x.svg" alt="close button">
      </div>

      <div class="modal-body">
        <p>Are you sure you want to log out?</p>
      </div>

      <div class="modal-actions">
        <button id="logout-cancel-btn" type="button" class="cancel-btn">Cancel</button>
        <button id="logout-confirm-btn" type="button" class="logout-btn">Log Out</button>
      </div>
    </div>
  </div>


  <div id="server-message" class="server-message hidden">
    <img id="server-message-icon" src="/images/icons/seal-check.svg" alt="Status Icon" class="server-message-icon" />
    <span id="server-message-text">This is a server message</span>
    <img id="server-message-close" src="/images/icons/x-circle.svg" alt="Close" class="server-message-close" />
  </div>

  <main class="app">

    <div class="header upper">
      <h2>Upload Image Here To Scan</h2>
      <input type="file" accept="image/*" capture="environment" id="mobileCameraInput" style="display: none" />
      <button class="camera-btn" onclick="openCamera()">Open Camera</button>
    </div>

    <div class="input-div">
      <p>Drag and Drop Images or <span class="browse">Browse</span></p>
      <input type="file" class="file" accept="image/png, image/jpeg, image/jpg" />
    </div>

    <div class="camera-div" id="camera-div">
      <div class="camera-box-container">

        <div class="camera-header">
          <button class="camera-close-btn" onclick="closeCamera()">
            <img src="/images/icons/x.svg" alt="Close" />
          </button>
        </div>

        <div class="camera-container" id="camera-container">



          <video class="camera-video" id="camera-video" autoplay></video>


          <div class="camera-footer">
            <button class="camera-capture-btn" onclick="captureImage()">
              <img src="/images/icons/camera.svg" alt="Capture" />
            </button>
          </div>
        </div>


        <div class="camera-modal" id="camera-modal">
          <div class="camera-modal-content">
            <img class="camera-preview-image" id="camera-preview-image" src="" />

            <div class="camera-buttons">

              <button class="camera-cancel-btn" onclick="cancelUpload()">
                <img src="/images/icons/arrow-left.svg" alt="Back" />
                <span>Back</span>
              </button>


              <button class="camera-upload-btn" onclick="uploadImage()">
                <span>Upload</span>
                <img src="/images/icons/arrow-down.svg" alt="Upload" />
              </button>
            </div>
          </div>
        </div>

      </div>
    </div>


    <div class="image-divs">
      <form id="queued-form">
        <div class="header">
          <h2>Images Preview</h2>
          <button id="upload" type="submit">Upload</button>
        </div>

        <div class="queued-div"></div>
      </form>

      <form id="saved-form">
        <div class="header lower">
          <h2>Uploaded Image</h2>
          <div class="buttons">
            <button id="scan" type="button" onclick="ScanImage()">Scan</button>


            <button id="delete" type="submit">Delete</button>
          </div>
        </div>

        <div class="saved-div"></div>
      </form>
    </div>
  </main>

  <div id="modal_container" class="modal-container">
    <div class="modal">

      <div class="modal-header">
        <h1 id="modal-title">Extraction Results</h1>
        <img class="modal-refresh-icon" id="refresh" src="/images/icons/arrow-clockwise.svg" alt="Refresh"
          onclick="RescanImage();" title="Refresh" />

        <img class="modal-save-icon" id="save" src="/images/icons/bookmark-simple.svg" alt="Save" onclick="saveData();"
          title="Save" />
        <img class="modal-close-icon" id="close" src="/images/icons/x.svg" alt="Close" title="Close" />
      </div>


      <div class="loader active">
        <div class="container">
          <div class="loading">
            <div class="loading-text"></div>

          </div>
        </div>
      </div>

      <div class="selector"></div>

      <div class="tabs">
        <div class="container">
          <div class="tab-container">
            <div class="tab-box">

              <select id="tabSelector" class="tab-btn">
                <option value="0" selected>Medication Details</option>
                <option value="1">Drug Interactions</option>
                <option value="2">Dosage Guidelines</option>
                <option value="3">Side Effects</option>
                <option value="4">Drug Prices</option>
              </select>

            </div>
            <div class="content-box">
              <div class="content active" id="drug_information">
                <p>
                </p>
              </div>

              <div class="content" id="interactions">
                <p>
                </p>
              </div>

              <div class="content" id="indications">
                <p>
                </p>
              </div>

              <div class="content" id="side_effects">
                <p>
                </p>
              </div>

              <div class="content" id="price">
                <p>
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-buttons">
        <img class="modal-back-icon" id="back" src="/images/icons/arrow-u-up-left.svg" alt="Back" title="Back" />

      </div>
    </div>
  </div>

  <footer class="footer">
    <div class="container">
      <div class="f-1">
        <a href="/user-extract">
          <img src="/images/logo-footer.png" alt="MedExtract Logo" class="logo-img" />
        </a>
        <p>
          Empowering healthcare through intelligent technology. Our system combines OCR, NLP, and BioBERT NER to
          transform complex clinical narratives into structured medical insights. Supporting accuracy, efficiency, and
          better patient care.
        </p>
      </div>

      <div class="f-2">
        <div>
          <h2>Links</h2>
          <ul class="nav">
            <li><a href="/user-extract">Extract</a></li>
            <li><a href="/user-search">Search</a></li>
            <li><a href="/user-settings">Settings</a></li>
            <li><a class="logout-confirm" href="#">Log Out</a></li>
            </a>
          </ul>
        </div>
      </div>

      <div class="f-3">
        <h2>Contacts</h2>
        <div class="contacts">
          <div>
            <img src="/flaticons/user/location.png" /> &nbsp;
            <p>
              University of The East Caloocan, 105 Samson Rd, Caloocan, Metro
              Manila
            </p>
          </div>
          <div>
            <img src="/flaticons/user/email.png" /> &nbsp;
            <p>nogot.markvincent@ue.edu.ph</p>
          </div>
          <div>
            <img src="/flaticons/user/call.png" /> &nbsp;
            <p>09991624156</p>
          </div>
        </div>
      </div>
    </div>
  </footer>


  <script>

    let medicineState = {};
    try {
      const saved = sessionStorage.getItem("medicineState");
      if (saved) medicineState = JSON.parse(saved);
    } catch (e) { /* ignore parse errors */ }


    const userId = "<%= userId %>";
    const username = "<%= username %>";

    let queuedImagesArray = [];
    savedForm = document.querySelector("#saved-form");
    queuedForm = document.querySelector("#queued-form");
    savedDiv = document.querySelector(".saved-div");
    queuedDiv = document.querySelector(".queued-div");
    inputDiv = document.querySelector(".input-div");
    input = document.querySelector(".input-div input");
    serverMessage = document.querySelector(".server-message");


    savedImages = JSON.parse('<%- JSON.stringify(images) %>');

    deleteImages = [];

    function confirmLogout() {
      if (confirm("Are you sure you want to log out?")) {
        window.location.href = "/logout";
      }
    }


    // SAVED IN DATABASE IMAGES



    if (savedImages) {
      displayedSavedImages()
    }

    function displayedSavedImages() {
      let image = savedImages[0];

      if (image && image.user_id) {
        savedDiv.innerHTML = `
      <div class="image">
        <img id="prescrip-img" src="https://med-extract.up.railway.app/user-image/${image.user_id}" alt="Saved Image">
      </div>`;
      } else {
        savedDiv.innerHTML = "";
      }
    }

    savedForm.addEventListener("submit", (e) => {
      e.preventDefault();

      cooldownButton(document.getElementById("delete"));
      if (!savedImages || savedImages.length === 0 || !savedImages[0].image) {
        showServerMessage("No image to delete.", "error");
        return;
      }

      deleteImagesFromServer();
    });

    function deleteImagesFromServer() {
      fetch("delete", {
        method: "PUT",
        headers: {
          Accept: "application/json, text/plain, */*",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          deleteImages
        }),
      })
        .then((response) =>
          response.json().then((data) => {
            if (!response.ok) throw new Error(data.message);
            deleteImages = [];
            showServerMessage(data.message, "success");
            location.reload();
          })
        )
        .catch((error) => {
          showServerMessage(error.message, "error");
        });
    }

    // QUEUED IN FRONTEND IMAGES

    input.addEventListener("change", () => {
      const files = input.files;
      if (files.length) {

        queuedImagesArray = [files[0]];
      }
      queuedForm.reset();
      displayQueuedImages();
    });

    inputDiv.addEventListener("drop", (e) => {
      e.preventDefault();
      const files = e.dataTransfer.files;

      for (let i = 0; i < files.length; i++) {
        if (!files[i].type.match("image")) continue;

        queuedImagesArray = [files[i]];
        break;
      }

      displayQueuedImages();
    });


    function displayQueuedImages() {
      let images = "";
      queuedImagesArray.forEach((image, index) => {
        images += `<div class="image">
                   <img src="${URL.createObjectURL(image)}" alt="image">
                   </div>`
      })
      queuedDiv.innerHTML = images;
    }

    queuedForm.addEventListener("submit", (e) => {
      e.preventDefault();
      cooldownButton(document.getElementById("upload"));
      sendQueuedImagesToServer();
    })



    function sendQueuedImagesToServer() {
      const formData = new FormData(queuedForm);
      queuedImagesArray.forEach((image, index) => {
        formData.append(`file[${index}]`, image);
      });

      fetch("upload", { method: "POST", body: formData })
        .then((response) =>
          response.json().then((data) => {
            if (!response.ok) throw new Error(data.message);

            showServerMessage(data.message, "success");
            location.reload();
          })
        )
        .catch((error) => {
          showServerMessage(error.message, "error");
        });
    }

    const contents = document.querySelectorAll(".content");


    const modal_container = document.getElementById("modal_container");
    const close = document.getElementById("close");
    const back = document.getElementById("back");


    const modalTitle = document.querySelector("#modal-title");
    const scanButton = document.getElementById("scan");



    const tabActive = document.querySelector(".tabs");
    const loaderActive = document.querySelector(".loader");
    const selectorDiv = document.querySelector(".selector");


    const drug_information = document.querySelector("#drug_information");
    const interactions = document.querySelector("#interactions");
    const indications = document.querySelector("#indications");
    const side_effects = document.querySelector("#side_effects");
    const price = document.querySelector("#price");

    let userSelectedMedicine = false;


    let loading;

    let formattedText = "";
    let medicineArray = [];

    const ScanImage = async () => {
      cooldownButton(document.getElementById("scan"));

      if (!savedImages || savedImages.length === 0 || !savedImages[0].image) {
        showServerMessage("No image uploaded. Please upload first.", "error");
        return;
      }

      disableModalClose();
      disableModalRefresh();

      userSelectedMedicine = false;

      // 🔹 Always reset any saved input states before starting a new scan
      medicineState = {};
      sessionStorage.removeItem("medicineState");

      modal_container.classList.add("show");
      count = 0;
      per = 0;
      loading = setInterval(animate, 100);

      const imageUrl = `https://med-extract.up.railway.app/api/image-proxy/${userId}`;
      console.log("Image URL:", imageUrl);
      console.log("User ID:", userId);

      try {
        const response = await fetch("https://thesis-webpage-v13-production-775f.up.railway.app/api/process-image", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            image_url: imageUrl,
            user_id: userId
          }),
        });

        if (!response.ok) {
          console.warn("⚠️ Response not OK, showing selector error.");
          stopLoaderAndShowSelectorError();
          return;
        }

        const data = await response.json();
        console.log("Processed Image Results:", data);

        if (data.formatted_text) {
          formattedText = data.formatted_text;
          console.log("✅ Formatted Text for Verification:", formattedText);
        }

        if (data.medicineArray && data.medicineArray.length > 0) {
          medicineArray = data.medicineArray;
          console.log("✅ Medicine Array for Verification:", medicineArray);

          renderMedicineList();
        } else {
          console.warn("⚠️ No medicines detected in response.");
          stopLoaderAndShowSelectorError();
        }

      } catch (error) {
        console.error("Error processing the image:", error);
        stopLoaderAndShowSelectorError();
      }
    };


    const RescanImage = async () => {
      disableModalClose();
      disableModalRefresh();

      medicineState = {};
      sessionStorage.removeItem("medicineState");


      userSelectedMedicine = false;


      clearInterval(loading);
      count = 0;
      per = 0;
      loaderActive.classList.add("active");
      loadingText.innerHTML = "";
      loading = setInterval(animate, 100);


      selectorDiv.classList.remove("active");
      tabActive.classList.remove("active");
      back.classList.remove("active");
      saveBtn.classList.remove("active");

      const imageUrl = `https://med-extract.up.railway.app/api/image-proxy/${userId}`;
      console.log("Rescan Image URL:", imageUrl);
      console.log("User ID:", userId);

      try {
        const response = await fetch("https://thesis-webpage-v13-production-775f.up.railway.app/api/process-image", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            image_url: imageUrl,
            user_id: userId
          }),
        });

        if (!response.ok) {
          console.warn("⚠️ Response not OK, showing selector error (rescan).");
          stopLoaderAndShowSelectorError();
          return;
        }

        const data = await response.json();
        console.log("Processed Image Results (rescan):", data);

        if (data.formatted_text) {
          formattedText = data.formatted_text;
          console.log("✅ Formatted Text for Verification (rescan):", formattedText);
        }

        if (data.medicineArray && data.medicineArray.length > 0) {
          medicineArray = data.medicineArray;
          console.log("✅ Medicine Array for Verification (rescan):", medicineArray);

          renderMedicineList();
        } else {
          console.warn("⚠️ No medicines detected in response (rescan).");
          stopLoaderAndShowSelectorError();
        }
      } catch (error) {
        console.error("Error processing the image (rescan):", error);
        stopLoaderAndShowSelectorError();
      } finally {
        enableModalClose();
        enableModalRefresh();
      }
    };

    back.addEventListener('click', () => {

      clearInterval(loading);
      count = 0;
      per = 0;


      loaderActive.classList.remove("active");
      tabActive.classList.remove("active");
      back.classList.remove("active");
      saveBtn.classList.remove("active");

      selectorDiv.classList.add("active");
      modalTitle.textContent = "Extraction Results";

      if (refresh) {
        refresh.style.display = "inline-block";
      }
    });


    close.addEventListener('click', () => {
      userSelectedMedicine = false;
      modal_container.classList.remove('show');

      medicineState = {};
      sessionStorage.removeItem("medicineState");

      clearInterval(loading);
      count = 0;
      per = 0;

      loaderActive.classList.add("active");
      tabActive.classList.remove("active");
      selectorDiv.classList.remove("active");
      saveBtn.classList.remove("active");
      back.classList.remove("active");
      modalTitle.textContent = "Extraction Results";
    });

    var loadingText = document.querySelector(".loading-text");

    var count = 0;
    var per = 0;

    function animate() {

      loadingText.innerHTML = "Scanning Image... Please wait.";

      if ((count == 10000) & (per == 60000)) {
        loadingText.classList.remove("loading-text-blink");
        loaderActive.classList.remove("active");


        if (!userSelectedMedicine) {
          selectorDiv.classList.add("active");
        }

        loadingText.innerHTML = "";

      } else {

        loadingText.classList.add("loading-text-blink");
        per = per + 6;
        count = count + 1;

      }
    }

    function animate2() {

      loadingText.innerHTML = "Generating medical insight... Please wait.";

      if ((count == 10000) & (per == 60000)) {
        loadingText.classList.remove("loading-text-blink");
        loaderActive.classList.remove("active");
        tabActive.classList.add("active");
        back.classList.add("active");
        saveBtn.classList.add("active");



      } else {

        loadingText.classList.add("loading-text-blink");
        per = per + 6;
        count = count + 1;

      }
    }



    async function sendRawTextToBackend(rawText) {
      try {
        const response = await fetch("https://thesis-webpage-v13-production-55fa.up.railway.app/process-raw-text", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            raw_text: rawText
          }),
        });

        if (!response.ok) {
          throw new Error(`Error: ${response.statusText}`);
        }

        const data = await response.json();
        console.log("Response from backend:", data);


        if (data.success) {
          console.log("Raw text successfully processed!");
        } else {
          console.log("Failed to process raw text.");
        }
      } catch (error) {
        console.error("Error sending raw text to backend:", error);
        alert("An error occurred while sending raw text to the backend.");
      }
    }



    function parseChatGPTString(input) {
      if (!input) return [];
      const regex = /\/([^\/]+)\/\s*\[([^\]]+)\]\s*\(([^)]+)\)\s*<([^>]+)>/g;
      let match;
      const results = [];

      while ((match = regex.exec(input)) !== null) {
        results.push({
          name: match[1].trim(),
          strength: match[2].trim(),
          frequency: match[3].trim(),
          duration: match[4].trim(),
        });
      }

      return results;
    }

    function renderMedicineList() {
      selectorDiv.innerHTML = "";

      console.log("renderMedicineList() medicineState (before):", medicineState);


      const gptItems = parseChatGPTString(formattedText).filter(i => i && i.name);
      const gptKeys = gptItems.map(i => i.name.trim().toLowerCase());


      const bioKeys = (medicineArray || []).map(n => (n || "").trim().toLowerCase());
      const bioSet = new Set(bioKeys);


      const overlap = gptKeys.filter(key => bioSet.has(key));

      if (!gptKeys.length || !bioSet.size || !overlap.length) {
        console.warn("⚠️ No valid overlap between GPT and BioBERT. Showing selector error.");
        stopLoaderAndShowSelectorError();
        return;
      }

      const container = document.createElement("div");
      container.classList.add("medicine-container");


      const headerRow = document.createElement("div");
      headerRow.classList.add("medicine-row", "medicine-header");
      ["Name", "Strength", "Frequency", "Duration", "Action"].forEach(title => {
        const headerCell = document.createElement("div");
        headerCell.textContent = title;
        headerCell.classList.add("medicine-header-cell");
        headerRow.appendChild(headerCell);
      });
      container.appendChild(headerRow);

      gptItems.forEach(item => {
        if (!item.name) return;

        const itemKey = (item.name || "").trim().toLowerCase();
        if (!bioSet.has(itemKey)) return;

        const row = document.createElement("div");
        row.classList.add("medicine-row");

        // Column 1: Medicine Name
        const nameDiv = document.createElement("div");
        nameDiv.textContent = item.name;

        // Column 2: Strength
        const strengthDiv = document.createElement("div");
        strengthDiv.textContent = item.strength;

        // Column 3: Frequency (with edit/close icons)
        const freqDiv = document.createElement("div");
        freqDiv.classList.add("frequency-cell");

        let freqValue = item.frequency && item.frequency.trim() !== ""
          ? item.frequency
          : "1 a day";

        const freqSpan = document.createElement("span");
        freqSpan.textContent = freqValue;

        const freqEditIcon = document.createElement("img");
        freqEditIcon.src = "/images/icons/pencil-line.svg";
        freqEditIcon.alt = "Edit";
        freqEditIcon.classList.add("edit-icon");

        const freqCloseIcon = document.createElement("img");
        freqCloseIcon.src = "/images/icons/x.svg";
        freqCloseIcon.alt = "Close";
        freqCloseIcon.classList.add("close-icon");
        freqCloseIcon.style.display = "none";

        const freqInput = document.createElement("input");
        freqInput.type = "number";
        freqInput.min = "1";
        freqInput.style.width = "60px";
        freqInput.style.display = "none";
        freqInput.classList.add("frequency-input");



        freqEditIcon.onclick = () => {
          const match = freqValue.match(/(\d+)\s*a\s*day/i);
          if (match) {
            freqInput.value = match[1];
          } else {
            freqInput.value = "1";
          }

          freqSpan.style.display = "none";
          freqEditIcon.style.display = "none";
          freqInput.style.display = "inline-block";
          freqCloseIcon.style.display = "inline-block";
        };


        freqCloseIcon.onclick = () => {
          if (freqInput.value !== "" && parseInt(freqInput.value, 10) >= 1) {
            const newVal = `${parseInt(freqInput.value, 10)} a day`;
            freqValue = newVal;
            freqSpan.textContent = newVal;
          } else {
            freqValue = "1 a day";
            freqSpan.textContent = freqValue;
          }

          freqSpan.style.display = "inline";
          freqEditIcon.style.display = "inline-block";
          freqInput.style.display = "none";
          freqCloseIcon.style.display = "none";
        };

        freqDiv.appendChild(freqSpan);
        freqDiv.appendChild(freqInput);
        freqDiv.appendChild(freqEditIcon);
        freqDiv.appendChild(freqCloseIcon);


        // Column 4: Duration (with edit/close icons)
        const durationDiv = document.createElement("div");
        durationDiv.classList.add("duration-cell");


        let savedRaw = (medicineState[itemKey] && medicineState[itemKey].duration) || null;
        if (savedRaw) savedRaw = savedRaw.replace(/[()]/g, "").trim();


        let initialFromItem = (item.duration && item.duration.toLowerCase() !== "empty") ? item.duration : null;
        if (initialFromItem) initialFromItem = initialFromItem.replace(/[()]/g, "").trim();


        let durationValue = savedRaw || initialFromItem || "no duration";

        const textSpan = document.createElement("span");
        textSpan.textContent = durationValue;

        const editIcon = document.createElement("img");
        editIcon.src = "/images/icons/pencil-line.svg";
        editIcon.alt = "Edit";
        editIcon.classList.add("edit-icon");

        const closeIcon = document.createElement("img");
        closeIcon.src = "/images/icons/x.svg";
        closeIcon.alt = "Close";
        closeIcon.classList.add("close-icon");
        closeIcon.style.display = "none";

        const input = document.createElement("input");
        input.type = "number";
        input.min = "0";
        input.style.width = "60px";
        input.style.display = "none";
        input.classList.add("duration-input");


        const select = document.createElement("select");
        ["days", "weeks", "months"].forEach(opt => {
          const option = document.createElement("option");
          option.value = opt;
          option.textContent = opt;
          select.appendChild(option);

        });
        select.style.display = "none";
        select.classList.add("duration-select");



        function commitDurationToState(key, newDuration) {
          medicineState[key] = medicineState[key] || {};
          medicineState[key].duration = newDuration;
          try {
            sessionStorage.setItem("medicineState", JSON.stringify(medicineState));
          } catch (e) {
            console.warn("Could not save medicineState to sessionStorage", e);
          }
          console.log("Committed duration for", key, "=>", newDuration);
        }

        editIcon.onclick = () => {
          medicineState[itemKey] = medicineState[itemKey] || {};
          if (!medicineState[itemKey].duration) {
            medicineState[itemKey].duration = durationValue;
            try {
              sessionStorage.setItem("medicineState", JSON.stringify(medicineState));
            } catch (e) { /* ignore */ }
          }

          const match = durationValue.match(/for\s+(\d+)\s+(\w+)/i);
          if (match) {
            input.value = match[1];
            select.value = match[2].toLowerCase();
          } else {
            input.value = "";
            select.value = "days";
          }

          textSpan.style.display = "none";
          editIcon.style.display = "none";
          input.style.display = "inline-block";
          select.style.display = "inline-block";
          closeIcon.style.display = "inline-block";
        };


        closeIcon.onclick = () => {
          if (input.value !== "" && !isNaN(parseInt(input.value, 10))) {
            const num = parseInt(input.value, 10);
            if (num > 0) {
              const newVal = `for ${num} ${select.value}`;
              durationValue = newVal;
              commitDurationToState(itemKey, newVal);
            } else {
              durationValue = "no duration";
              commitDurationToState(itemKey, durationValue);
            }
          } else {
            if (medicineState[itemKey] && medicineState[itemKey].duration) {
              durationValue = medicineState[itemKey].duration.replace(/[()]/g, "").trim();
            } else if (initialFromItem) {
              durationValue = initialFromItem;
            } else {
              durationValue = "no duration";
            }
          }

          textSpan.textContent = durationValue;

          textSpan.style.display = "inline";
          editIcon.style.display = "inline-block";
          input.style.display = "none";
          select.style.display = "none";
          closeIcon.style.display = "none";
        };

        durationDiv.appendChild(textSpan);
        durationDiv.appendChild(input);
        durationDiv.appendChild(select);
        durationDiv.appendChild(editIcon);
        durationDiv.appendChild(closeIcon);

        // Column 5: Button
        const btnDiv = document.createElement("div");
        const button = document.createElement("button");
        button.textContent = "Generate Insight";
        button.classList.add("generate-insight-button");


        button.onclick = () => {
          if (input.style.display !== "none") {
            if (input.value !== "" && !isNaN(parseInt(input.value, 10))) {
              const num = parseInt(input.value, 10);
              if (num > 0) {
                const newVal = `for ${num} ${select.value}`;
                durationValue = newVal;
                commitDurationToState(itemKey, newVal);
              } else {
                durationValue = "no duration";
                commitDurationToState(itemKey, durationValue);
              }
            } else {
              if (medicineState[itemKey] && medicineState[itemKey].duration) {
                durationValue = medicineState[itemKey].duration.replace(/[()]/g, "").trim();
              } else if (initialFromItem) {
                durationValue = initialFromItem;
              } else {
                durationValue = "no duration";
              }
            }

            textSpan.textContent = durationValue;
            textSpan.style.display = "inline";
            editIcon.style.display = "inline-block";
            input.style.display = "none";
            select.style.display = "none";
            closeIcon.style.display = "none";
          }

          if (refresh) {
            refresh.style.display = "none";
          }

          openMedicineModal(item.name, item.strength, item.frequency, durationValue);
        };

        btnDiv.appendChild(button);

        row.appendChild(nameDiv);
        row.appendChild(strengthDiv);
        row.appendChild(freqDiv);
        row.appendChild(durationDiv);
        row.appendChild(btnDiv);

        container.appendChild(row);
      });

      selectorDiv.appendChild(container);
      selectorDiv.classList.add("active");

      console.log("renderMedicineList() medicineState (after):", medicineState);
      stopLoaderAndShowSelector();
    }


    // Listen for real-time updates using SSE
    const eventSource = new EventSource("https://thesis-webpage-v13-production-775f.up.railway.app/api/stream-medicines");



    eventSource.onmessage = (event) => {
      const payload = JSON.parse(event.data);


      if (Array.isArray(payload)) {
        medicineArray = payload;
      } else {
        if (payload.medicineArray) medicineArray = payload.medicineArray;
        if (payload.formattedText) formattedText = payload.formattedText;
      }

      renderMedicineList();
    };

    async function openMedicineModal(medicineName, strength, frequency, durationValue) {
      disableModalClose();


      clearInterval(loading);
      count = 0;
      per = 0;


      count = 0;
      per = 0;
      loading = setInterval(animate2, 100);
      loaderActive.classList.add("active");

      selectorDiv.classList.remove("active");
      modalTitle.textContent = `${medicineName} Medical Insights`;

      console.log("Selected Medicine:", medicineName);
      console.log("Strength:", strength);
      console.log("Frequency:", frequency);
      console.log("Duration:", durationValue);


      function setContentWithNotice(element, notice, content) {
        element.innerHTML = `
      <p class="info-source">${notice}</p>
      <p>${content}</p>
    `;
      }

      // Fetch drug information from the API
      try {
        const response = await fetch("https://thesis-webpage-v13-production-55fa.up.railway.app/get-extract-info", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            drug_name: medicineName,
            strength: strength,
            frequency: frequency,
            duration: durationValue
          }),
        });

        if (!response.ok) {
          throw new Error(`Error: ${response.statusText}`);
        }

        const data = await response.json();

        if (
          data.strength !== undefined &&
          data.frequency !== undefined &&
          data.duration !== undefined &&
          data.strength === strength &&
          data.frequency === frequency &&
          data.duration === durationValue
        ) {
          console.log("✅ strengthDiv, durationValue and freqDiv successfully passed to backend and received in response!");
          stopLoaderAndShowTabs();
        } else {
          console.warn("⚠️ strengthDiv, durationValue and/or freqDiv may not have been passed or received correctly.");
        }

        if (data.error) {
          drug_information.textContent = "";
          interactions.textContent = "";
          indications.textContent = "";
          side_effects.textContent = "";
          price.textContent = "";
          stopLoaderAndShowTabsError();
        } else {

          setContentWithNotice(
            drug_information,
            "The information provided is derived from Drug Bank.",
            data.drug_information || "No details available."
          );

          setContentWithNotice(
            interactions,
            "The information provided is derived from Drug Bank.",
            data.interaction || "No interactions available."
          );

          setContentWithNotice(
            indications,
            "The information provided is derived from the scanned medical prescription.",
            data.dosage || "No indications available."
          );

          setContentWithNotice(
            side_effects,
            "The information provided is derived from Drug Bank.",
            data.side_effects || "No side effects available."
          );

          setContentWithNotice(
            price,
            "The information provided was derived from publicly available online sources via OpenAI. Prices are suggested retail and may vary or change without notice.",
            (data.price || "No price information available.").replace(/\n/g, "<br>")
          );
        }
      } catch (error) {
        console.error("Failed to fetch drug information:", error);
        stopLoaderAndShowTabsError();
      }
    }


    const saveBtn = document.querySelector("#save");

    function saveData() {
      const modalTitle = document.querySelector("#modal-title");
      const medicineName = modalTitle.textContent.split(" Medical Insights")[0];


      function cleanText(id, notice) {
        const el = document.getElementById(id);
        if (!el) return "";


        let text = el.textContent.trim();


        if (text.startsWith(notice)) {
          text = text.replace(notice, "").trim();
        }

        return text;
      }

      const details = cleanText(
        "drug_information",
        "The information provided is derived from Drug Bank."
      );
      const interactions = cleanText(
        "interactions",
        "The information provided is derived from Drug Bank."
      );
      const guidelines = cleanText(
        "indications",
        "The information provided is derived from the scanned medical prescription."
      );
      const effects = cleanText(
        "side_effects",
        "The information provided is derived from Drug Bank."
      );
      const prices = cleanText(
        "price",
        "The information provided was derived from publicly available online sources via OpenAI. Prices are suggested retail and may vary or change without notice."
      );

      const data = {
        medicineName,
        details: details || "No details available.",
        interactions: interactions || "No interactions available.",
        guidelines: guidelines || "No indications available.",
        effects: effects || "No side effects available.",
        prices: prices || "No price information available.",
      };

      fetch("/user/save-history", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      })
        .then((response) =>
          response.json().then((json) => {
            if (!response.ok) throw new Error(json.message);
            showServerMessage(json.message, "success");
          })
        )
        .catch((error) => {
          console.error("Error:", error);
          showServerMessage(error.message, "error");
        });
    }


    function stopLoaderAndShowSelector() {
      clearInterval(loading);
      loaderActive.classList.remove("active");
      loadingText.innerHTML = "";
      selectorDiv.classList.add("active");
      enableModalClose();
      enableModalRefresh();
    }

    function stopLoaderAndShowSelectorError() {
      clearInterval(loading);
      loaderActive.classList.remove("active");
      loadingText.innerHTML = "";

      selectorDiv.classList.add("active");


      selectorDiv.innerHTML = `
    <div class="selector-error-message">
      <p>Sorry, we could not extract any medicines from your image. This may happen if:</p>
      <ul>
        <li>The prescription text was unclear or blurry</li>
        <li>No medicine names were detected</li>
        <li>The image uploaded was not a valid prescription</li>
        <li>The system misinterpreted the prescription text</li>
      </ul>
      <p><strong>Please try again with a clearer prescription image.</strong></p>
    </div>
  `;

      enableModalClose();
      enableModalRefresh();
    }

    function stopLoaderAndShowTabs() {
      clearInterval(loading);
      loaderActive.classList.remove("active");
      loadingText.innerHTML = "";


      const tabBox = document.querySelector(".tab-box");
      if (tabBox) tabBox.style.display = "";


      const tabSelector = document.getElementById("tabSelector");
      if (tabSelector) {
        tabSelector.value = "0";
      }


      const allContents = document.querySelectorAll(".content-box .content");
      allContents.forEach((c) => c.classList.remove("active"));
      const drugInfo = document.getElementById("drug_information");
      if (drugInfo) drugInfo.classList.add("active");

      tabActive.classList.add("active");
      back.classList.add("active");
      saveBtn.classList.add("active");

      enableModalClose();
    }


    function stopLoaderAndShowTabsError() {
      clearInterval(loading);
      loaderActive.classList.remove("active");
      loadingText.innerHTML = "";

      tabActive.classList.add("active");


      const tabBox = document.querySelector(".tab-box");
      if (tabBox) tabBox.style.display = "none";


      const tabSelector = document.getElementById("tabSelector");
      if (tabSelector) {
        tabSelector.value = "0";
      }


      const allContents = document.querySelectorAll(".content-box .content");
      allContents.forEach((c) => c.classList.remove("active"));
      const drugInfo = document.getElementById("drug_information");
      if (drugInfo) {
        drugInfo.classList.add("active");
        drugInfo.innerHTML = `
      <div class="tabs-error-message">
        <p>Sorry, we could not retrieve medical insights for this medicine. This may happen if:</p>
        <ul>
          <li>The medicine name was misspelled or unrecognized</li>
          <li>The medicine is not included in our dataset</li>
          <li>A brand name was used instead of the generic name</li>
          <li>The backend service is currently unavailable</li>
        </ul>
        <p><strong>Please try again or check the medicine name.</strong></p>
      </div>
    `;
      }


      back.classList.add("active");

      saveBtn.classList.remove("active");
      enableModalClose();
    }



    const tabSelector = document.getElementById("tabSelector");


    tabSelector.addEventListener("change", () => {
      const index = parseInt(tabSelector.value, 10);

      contents.forEach((content, i) => {
        if (i === index) {
          content.classList.add("active");
        } else {
          content.classList.remove("active");
        }
      });
    });


    let serverMessageTimeout = null;

    function showServerMessage(message, type = "success") {
      const serverMessage = document.getElementById("server-message");
      const messageText = document.getElementById("server-message-text");
      const messageIcon = document.getElementById("server-message-icon");


      serverMessage.classList.remove("success", "error");


      messageText.textContent = message;


      if (type === "success") {
        serverMessage.classList.add("success");
        messageIcon.src = "/images/icons/seal-check-green.svg";
      } else if (type === "error") {
        serverMessage.classList.add("error");
        messageIcon.src = "/images/icons/seal-warning-red.svg";
      }


      serverMessage.classList.remove("hidden");
      serverMessage.classList.add("show");


      sessionStorage.setItem(
        "serverMessage",
        JSON.stringify({
          message,
          type
        })
      );


      if (serverMessageTimeout) clearTimeout(serverMessageTimeout);


      serverMessageTimeout = setTimeout(() => {
        hideServerMessage();
      }, 3000);
    }

    function hideServerMessage() {
      const serverMessage = document.getElementById("server-message");


      if (serverMessageTimeout) clearTimeout(serverMessageTimeout);


      sessionStorage.removeItem("serverMessage");
      serverMessageTimeout = null;


      serverMessage.classList.remove("show");

      setTimeout(() => {
        serverMessage.classList.add("hidden");
      }, 400);
    }


    document
      .getElementById("server-message-close")
      .addEventListener("click", () => {
        hideServerMessage();
      });

    window.addEventListener("load", () => {
      const stored = sessionStorage.getItem("serverMessage");
      if (stored) {
        const {
          message,
          type
        } = JSON.parse(stored);
        if (message) showServerMessage(message, type);

      }
    });

    function cooldownButton(button, ms = 3000) {
      if (!button) return;
      button.disabled = true;
      button.classList.add("disabled");
      setTimeout(() => {
        button.disabled = false;
        button.classList.remove("disabled");
      }, ms);
    }

    function disableModalClose() {
      if (close) {
        close.style.pointerEvents = "none";
        close.style.opacity = "0.5";
      }
    }

    function enableModalClose() {
      if (close) {
        close.style.pointerEvents = "auto";
        close.style.opacity = "1";
      }
    }

    function disableModalRefresh() {
      if (refresh) {
        refresh.style.pointerEvents = "none";
        refresh.style.opacity = "0.5";
      }
    }

    function enableModalRefresh() {
      if (refresh) {
        refresh.style.pointerEvents = "auto";
        refresh.style.opacity = "1";
      }
    }


    function toggleDropdown(event) {
      event.stopPropagation();
      document.querySelector(".user-menu .dropdown").classList.toggle("active");
    }


    document.addEventListener("click", () => {
      document.querySelector(".user-menu .dropdown").classList.remove("active");
    });

    // logout

    const logoutLinks = document.querySelectorAll(".logout-confirm");
    const logoutModal = document.querySelector(".logout-modal-container");
    const logoutCloseBtn = document.getElementById("logout-close-btn");
    const logoutCancelBtn = document.getElementById("logout-cancel-btn");
    const logoutConfirmBtn = document.getElementById("logout-confirm-btn");

    // Open modal
    logoutLinks.forEach(link => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        logoutModal.classList.add("active");
      });
    });


    logoutCloseBtn.addEventListener("click", () => {
      logoutModal.classList.remove("active");
    });


    logoutCancelBtn.addEventListener("click", () => {
      logoutModal.classList.remove("active");
    });


    logoutConfirmBtn.addEventListener("click", () => {
      window.location.href = "/logout";
    });

    const isMobile = () =>
      /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
    let capturedBase64 = null;

    async function openCamera() {
      if (isMobile()) {
        document.getElementById("mobileCameraInput").click();
      } else {
        const cameraDiv = document.getElementById("camera-div");
        const video = document.getElementById("camera-video");
        const cameraContainer = document.getElementById("camera-container");

        cameraDiv.classList.add("active");
        cameraContainer.style.display = "flex";

        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            video: true,
          });
          video.srcObject = stream;
        } catch (err) {
          alert("Camera not accessible: " + err.message);
        }
      }
    }

    document
      .getElementById("mobileCameraInput")
      .addEventListener("change", (e) => {
        const file = e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = (ev) => {
          capturedBase64 = ev.target.result;
          showPreview(capturedBase64);
        };
        reader.readAsDataURL(file);
      });

    function captureImage() {
      const video = document.getElementById("camera-video");
      const canvas = document.createElement("canvas");
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const ctx = canvas.getContext("2d");
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      capturedBase64 = canvas.toDataURL("image/png");


      const stream = video.srcObject;
      if (stream) {
        stream.getTracks().forEach((track) => track.stop());
        video.srcObject = null;
      }

      showPreview(capturedBase64);
    }

    function showPreview(base64) {
      document.getElementById("camera-preview-image").src = base64;


      document.getElementById("camera-container").style.display = "none";


      document.getElementById("camera-modal").classList.add("active");
    }

    function cancelUpload() {
      document.getElementById("camera-modal").classList.remove("active");


      openCamera();

      capturedBase64 = null;
    }

    function closeCamera() {
      const video = document.getElementById("camera-video");


      const stream = video.srcObject;
      if (stream && stream.getTracks) {
        stream.getTracks().forEach((track) => track.stop());
      }
      video.srcObject = null;

      document.getElementById("camera-div").classList.remove("active");


      document.getElementById("camera-modal").classList.remove("active");
      document.getElementById("camera-container").style.display = "flex";
      capturedBase64 = null;
    }

    async function uploadImage() {
      if (!capturedBase64) return alert("No image to upload.");
      const res = await fetch("/save-image", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ image: capturedBase64 }),
      });
      const data = await res.json();
      location.reload();
    }

    function toggleBurger() {
      const burger = document.getElementById("burger-toggle");
      const mobileMenu = document.getElementById("mobile-menu");
      const burgerIcon = burger.querySelector("img");

      mobileMenu.classList.toggle("open");

      if (mobileMenu.classList.contains("open")) {
        burgerIcon.src = "/images/icons/x-white.svg";
      } else {
        burgerIcon.src = "/images/icons/list-white.svg";
      }
    }






  </script>

</body>

</html>